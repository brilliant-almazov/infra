version: '3.7'

services:
    traefik:
        image: traefik:v2.5.3
        command:
            - --api.dashboard=true
            - --api.insecure=true
            - --entrypoints.web.address=:80
            - --entrypoints.web.http.redirections.entrypoint.to=websecure
            - --entrypoints.web.http.redirections.entrypoint.scheme=https
            - --entrypoints.websecure.address=:443
            - --providers.docker.swarmMode=true
            - --providers.docker.network=traefik
            - --providers.docker.exposedByDefault=false
            - --certificatesresolvers.leresolver.acme.email=me@grachevko.ru
            - --certificatesresolvers.leresolver.acme.storage=/etc/traefik/acme.json
            - --certificatesresolvers.leresolver.acme.tlschallenge=true
            - --metrics=true
            - --metrics.prometheus=true
            - --metrics.prometheus.entryPoint=metrics
            - --entryPoints.metrics.address=:8082
        ports:
            -   target: 80
                published: 80
                mode: host
            -   target: 443
                published: 443
                mode: host
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /opt/infra/traefik:/etc/traefik
        networks:
            - traefik
        deploy:
            mode: global
            placement:
                constraints:
                    - node.role == manager
            update_config:
                parallelism: 1
                delay: 10s
                order: stop-first

    traefik_oath2-proxy: &oauth2-proxy
        image: quay.io/oauth2-proxy/oauth2-proxy:v7.1.3
        command:
            - --http-address=:80
            - --reverse-proxy=true
            - --cookie-secret=${OAUTH2_PROXY_DEVOPS_COOKIE_SECRET}
            - --session-store-type=redis
            - --redis-connection-url=redis://redis:6379/1
            - --email-domain=*
            - --allowed-group=admin
            - --provider=keycloak
            - --skip-provider-button=true
            - --scope=openid
            - --client-id=${OAUTH2_PROXY_DEVOPS_CLIENT_ID}
            - --client-secret=${OAUTH2_PROXY_DEVOPS_CLIENT_SECRET}
            - --login-url=https://sso.automagistre.ru/auth/realms/automagistre/protocol/openid-connect/auth
            - --redeem-url=https://sso.automagistre.ru/auth/realms/automagistre/protocol/openid-connect/token
            - --profile-url=https://sso.automagistre.ru/auth/realms/automagistre/protocol/openid-connect/userinfo
            - --validate-url=https://sso.automagistre.ru/auth/realms/automagistre/protocol/openid-connect/userinfo
        environment:
            OAUTH2_PROXY_UPSTREAMS: http://traefik:8080
            OAUTH2_PROXY_REDIRECT_URL: https://traefik.automagistre.ru/oauth2/callback
        networks:
            - redis
            - traefik
        deploy:
            labels:
                - "traefik.enable=true"
                - "traefik.http.routers.dashboard.rule=Host(`traefik.automagistre.ru`)"
                - "traefik.http.routers.dashboard.entrypoints=websecure"
                - "traefik.http.routers.dashboard.tls=true"
                - "traefik.http.routers.dashboard.tls.certresolver=leresolver"
                - "traefik.http.services.dashboard-service.loadbalancer.server.port=80"

    redis:
        image: redis:6.2.5-alpine
        volumes:
            -   type: bind
                source: /opt/infra/redis/data
                target: /data
        networks:
            - redis
        deploy:
            mode: replicated
            replicas: 1
            endpoint_mode: dnsrr
            update_config:
                order: stop-first

    postgres: &postgres
        image: postgres:13.4-alpine
        environment:
            POSTGRES_PASSWORD: ${INFRA_POSTGRES_PASSWORD}
        volumes:
            - /opt/infra/postgres/data:/var/lib/postgresql/data
        networks:
            - postgres
        healthcheck:
            test: pg_isready -U postgres
            interval: 5s
            timeout: 5s
            retries: 3
            start_period: 10s

    postgres_backup:
        <<: *postgres
        entrypoint: /bin/sh
        command:
            - -c
            - |
                apk add --no-cache tini gzip \
                && echo $$'
                postgres:5432:keycloak:keycloak:${KEYCLOAK_POSTGRES_PASSWORD}
                postgres:5432:sonarqube:sonarqube:${SONARQUBE_POSTGRES_PASSWORD}
                ' > ~/.pgpass \
                && chmod 600 ~/.pgpass \
                && echo $$'
                15 3 * * * pg_dump -h postgres -U keycloak | gzip > /backups/$$(date +"%Y%m%d_%H%M%S")_keycloak.sql.gz
                15 3 * * * pg_dump -h postgres -U sonarqube | gzip > /backups/$$(date +"%Y%m%d_%H%M%S")_sonarqube.sql.gz
                ' | crontab - \
                && exec tini -- crond -l 0 -f
        volumes:
            - /opt/infra/backups/postgres:/backups
        networks:
            - postgres
        healthcheck:
            disable: true

    keycloak:
        image: jboss/keycloak:15.0.2
        command:
            - -b
            - 0.0.0.0
            - -Dkeycloak.profile.feature.docker=enabled
        environment:
            DB_VENDOR: POSTGRES
            DB_ADDR: postgres
            DB_DATABASE: keycloak
            DB_USER: keycloak
            DB_SCHEMA: public
            DB_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
            KEYCLOAK_USER: ${KEYCLOAK_USER}
            KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
            PROXY_ADDRESS_FORWARDING: 'true'
        networks:
            - postgres
            - traefik
        deploy:
            update_config:
                order: stop-first
                failure_action: rollback
                parallelism: 1
                delay: 5s
            labels:
                - "traefik.enable=true"
                - "traefik.http.routers.infra-keycloak.rule=Host(`auth.automagistre.ru`, `sso.automagistre.ru`)"
                - "traefik.http.routers.infra-keycloak.entrypoints=websecure"
                - "traefik.http.routers.infra-keycloak.tls=true"
                - "traefik.http.routers.infra-keycloak.tls.certresolver=leresolver"
                - "traefik.http.services.infra-keycloak-service.loadbalancer.server.port=8080"
                - "traefik.http.services.infra-keycloak-service.loadbalancer.server.scheme=http"

    # sudo chown nobody:nogroup /var/lib/prometheus
    prometheus:
        image: prom/prometheus:v2.30.0
        command:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/var/lib/prometheus
            - --storage.tsdb.retention=30d
        environment:
            PROMETHEUS_HASH: ${PROMETHEUS_HASH}
        volumes:
            - /opt/infra/prometheus/data:/var/lib/prometheus
            - /opt/infra/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
        networks:
            - prometheus
            - traefik
        deploy:
            mode: replicated
            placement:
                constraints:
                    - node.role == manager
            resources:
                limits:
                    memory: 2048M
                reservations:
                    memory: 128M
            update_config:
                parallelism: 1
                delay: 10s
                order: stop-first

    prometheus_oauth2-proxy:
        <<: *oauth2-proxy
        environment:
            OAUTH2_PROXY_UPSTREAMS: http://prometheus:9090
            OAUTH2_PROXY_REDIRECT_URL: https://prometheus.automagistre.ru/oauth2/callback
        networks:
            - prometheus
            - redis
            - traefik
        deploy:
            labels:
                - "traefik.enable=true"
                - "traefik.http.routers.infra-prometheus.rule=Host(`prometheus.automagistre.ru`)"
                - "traefik.http.routers.infra-prometheus.entrypoints=websecure"
                - "traefik.http.routers.infra-prometheus.tls=true"
                - "traefik.http.routers.infra-prometheus.tls.certresolver=leresolver"
                - "traefik.http.services.infra-prometheus-service.loadbalancer.server.port=80"

    # sudo chown 472:472 /var/lib/grafana
    grafana:
        image: grafana/grafana:8.1.4
        environment:
            GF_SERVER_ROOT_URL: https://grafana.automagistre.ru
            GF_INSTALL_PLUGINS: grafana-piechart-panel
            GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
            GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
            GF_USERS_ALLOW_SIGN_UP: 'false'
            GF_SMTP_ENABLED: 'true'
            GF_SMTP_FROM_ADDRESS: grafana@automagistre.ru
            GF_SMTP_FROM_NAME: Grafana
            GF_SMTP_HOST: ${SMTP_HOST}:${SMTP_PORT}
            GF_SMTP_USER: ${SMTP_LOGIN}
            GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
        volumes:
            - /opt/infra/grafana:/var/lib/grafana
        networks:
            - prometheus
            - traefik
        deploy:
            mode: replicated
            update_config:
                parallelism: 1
                delay: 10s
                order: stop-first
            labels:
                - "traefik.enable=true"
                - "traefik.http.routers.infra-grafana.rule=Host(`grafana.automagistre.ru`)"
                - "traefik.http.routers.infra-grafana.entrypoints=websecure"
                - "traefik.http.routers.infra-grafana.tls=true"
                - "traefik.http.routers.infra-grafana.tls.certresolver=leresolver"
                - "traefik.http.services.infra-grafana-service.loadbalancer.server.port=3000"

    node-exporter:
        image: prom/node-exporter:v1.2.2
        entrypoint: /bin/sh
        command:
            - -c
            - |
                set -ex \
                && mkdir -p /etc/node-exporter/ \
                && echo node_meta{node_id=\"$$NODE_ID\", container_label_com_docker_swarm_node_id=\"$$NODE_ID\", node_name=\"$$(cat /etc/nodename)\"} 1 > /etc/node-exporter/node-meta.prom \
                && cat /etc/node-exporter/node-meta.prom \
                && exec /bin/node_exporter \
                --path.sysfs=/host/sys \
                --path.procfs=/host/proc \
                --collector.textfile.directory=/etc/node-exporter/ \
                --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)" \
                --no-collector.ipvs
        environment:
            - NODE_ID={{.Node.ID}}
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
            - /etc/hostname:/etc/nodename
        networks:
            - prometheus
        user: root
        deploy:
            mode: global
            resources:
                limits:
                    memory: 128M
                reservations:
                    memory: 64M

    cadvisor:
        image: gcr.io/cadvisor/cadvisor:v0.40.0
        command: -logtostderr -docker_only
        volumes:
            - /:/rootfs:ro
            - /etc/machine-id:/etc/machine-id:ro
            - /sys:/sys:ro
            - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
            - /var/lib/docker/:/var/lib/docker:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - /var/run:/var/run
        networks:
            - prometheus
        deploy:
            mode: global
            resources:
                limits:
                    memory: 128M
                reservations:
                    memory: 64M

    sonarqube:
        image: sonarqube:8.9.2-community
        environment:
            SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonarqube
            SONAR_JDBC_USERNAME: sonarqube
            SONAR_JDBC_PASSWORD: ${SONARQUBE_POSTGRES_PASSWORD}
            SONAR_SCM_DISABLED: 'false'
        volumes:
            - /opt/infra/sonarqube/data:/opt/sonarqube/data
            - /opt/infra/sonarqube/extensions:/opt/sonarqube/extensions
            - /opt/infra/sonarqube/logs:/opt/sonarqube/logs
            - /opt/infra/sonarqube/temp:/opt/sonarqube/temp
        networks:
            - postgres
            - traefik
        deploy:
            mode: global
            update_config:
                order: stop-first
                failure_action: rollback
                parallelism: 1
                delay: 5s
            labels:
                - "traefik.enable=true"
                - "traefik.http.routers.infra-sonarqube.rule=Host(`sonarqube.automagistre.ru`)"
                - "traefik.http.routers.infra-sonarqube.entrypoints=websecure"
                - "traefik.http.routers.infra-sonarqube.tls=true"
                - "traefik.http.routers.infra-sonarqube.tls.certresolver=leresolver"
                - "traefik.http.services.infra-sonarqube-service.loadbalancer.server.port=9000"
                - "traefik.http.services.infra-sonarqube-service.loadbalancer.server.scheme=http"

    portainer:
        image: portainer/portainer-ce:linux-amd64-2.6.3-alpine
        command: -H tcp://tasks.portainer_agent:9001 --tlsskipverify
        volumes:
            - /opt/infra/portainer/data:/data
        networks:
            - portainer
            - traefik
        deploy:
            mode: replicated
            replicas: 1
            labels:
                - "traefik.enable=true"
                - "traefik.http.routers.portainer.rule=Host(`portainer.automagistre.ru`)"
                - "traefik.http.routers.portainer.entrypoints=websecure"
                - "traefik.http.routers.portainer.tls=true"
                - "traefik.http.routers.portainer.tls.certresolver=leresolver"
                - "traefik.http.services.portainer-service.loadbalancer.server.port=9000"

    portainer_agent:
        image: portainer/agent:linux-amd64-2.6.3-alpine
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /var/lib/docker/volumes:/var/lib/docker/volumes
        networks:
            - portainer
        deploy:
            mode: global
            placement:
                constraints: [ node.platform.os == linux ]

networks:
    traefik:
        driver: overlay
        attachable: true
        name: traefik
    postgres:
        driver: overlay
    redis:
        driver: overlay
    prometheus:
        driver: overlay
        name: prometheus
    portainer:
        driver: overlay
